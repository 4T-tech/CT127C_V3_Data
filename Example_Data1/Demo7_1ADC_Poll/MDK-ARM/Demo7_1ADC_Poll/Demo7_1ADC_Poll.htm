<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Static Call Graph - [Demo7_1ADC_Poll\Demo7_1ADC_Poll.axf]</title>
</head>
<body>
  <hr />
  <h1>Static Call Graph for image Demo7_1ADC_Poll\Demo7_1ADC_Poll.axf</h1>
  <hr />
  <br />
  <p>#&#060;CALLGRAPH&#062;# ARM Linker, 6210000: Last Updated: Fri Aug 9 12:00:13 2024<br /></p>
  <p></p>
  <h3>Maximum Stack Usage = 288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</h3>
  <h3>Call chain for Maximum Stack Depth:</h3>__rt_entry_main &rArr; main &rArr; OLED_Proc &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Write &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
  <p></p>
  <h3>Functions with no stack information</h3>
  <ul>
    <li><a href="#[63]">__user_initial_stackheap</a></li>
  </ul>
  <p></p>
  <h3>Mutually Recursive functions</h3>
  <li>
    <a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><br />
    <ul>
      <li><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><br /></li>
      <li><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><br /></li>
      <li><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><br /></li>
      <li><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><br /></li>
      <li><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><br /></li>
    </ul>
    <p></p>
    <h3>Function Pointers</h3>
    <ul>
      <li><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[3a]">AES_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[4]">BusFault_Handler</a> from stm32wlxx_it.o(.text.BusFault_Handler) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[1e]">COMP_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[1d]">DAC_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[3d]">DMA2_Channel1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[3e]">DMA2_Channel2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[3f]">DMA2_Channel3_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[40]">DMA2_Channel4_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[41]">DMA2_Channel5_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[42]">DMA2_Channel6_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[43]">DMA2_Channel7_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[44]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[7]">DebugMon_Handler</a> from stm32wlxx_it.o(.text.DebugMon_Handler) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[1f]">EXTI9_5_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[36]">HSEM_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[2]">HardFault_Handler</a> from stm32wlxx_it.o(.text.HardFault_Handler) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[28]">I2C1_ER_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[27]">I2C1_EV_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[2a]">I2C2_ER_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[29]">I2C2_EV_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[38]">I2C3_ER_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[37]">I2C3_EV_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[30]">LPTIM1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[31]">LPTIM2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[34]">LPTIM3_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[2f]">LPUART1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[3]">MemManage_Handler</a> from stm32wlxx_it.o(.text.MemManage_Handler) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[1]">NMI_Handler</a> from stm32wlxx_it.o(.text.NMI_Handler) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[3c]">PKA_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[8]">PendSV_Handler</a> from stm32wlxx_it.o(.text.PendSV_Handler) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[f]">RCC_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[3b]">RNG_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[0]">Reset_Handler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[2b]">SPI1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[2c]">SPI2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[35]">SUBGHZSPI_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[39]">SUBGHZ_Radio_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[6]">SVC_Handler</a> from stm32wlxx_it.o(.text.SVC_Handler) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[9]">SysTick_Handler</a> from stm32wlxx_it.o(.text.SysTick_Handler) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[45]">SystemInit</a> from system_stm32wlxx.o(.text.SystemInit) referenced from startup_stm32wle5xx.o(.text)</li>
      <li><a href="#[c]">TAMP_STAMP_LSECSS_SSRU_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[25]">TIM16_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[26]">TIM17_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[20]">TIM1_BRK_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[23]">TIM1_CC_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[22]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[21]">TIM1_UP_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[24]">TIM2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[2d]">USART1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[2e]">USART2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[5]">UsageFault_Handler</a> from stm32wlxx_it.o(.text.UsageFault_Handler) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)</li>
      <li><a href="#[46]">__main</a> from __main.o(!!!main) referenced from startup_stm32wle5xx.o(.text)</li>
      <li><a href="#[48]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)</li>
      <li><a href="#[47]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)</li>
    </ul>
    <p></p>
    <h3>Global Symbols</h3>
    <p><strong><a name="[46]" id="[46]"></a>__main</strong> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))<br />
    <br />
    [Calls]</p>
    <ul>
      <li><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload</li>
      <li><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry</li>
    </ul><br />
    [Address Reference Count : 1]
    <ul>
      <li>startup_stm32wle5xx.o(.text)</li>
    </ul>
    <p><strong><a name="[49]" id="[49]"></a>__scatterload</strong> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main</li>
    </ul>
    <p><strong><a name="[4b]" id="[4b]"></a>__scatterload_rt2</strong> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)<br />
    <br />
    [Calls]</p>
    <ul>
      <li><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry</li>
    </ul>
    <p><strong><a name="[9e]" id="[9e]"></a>__scatterload_rt2_thumb_only</strong> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)</p>
    <p><strong><a name="[9f]" id="[9f]"></a>__scatterload_loop</strong> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)</p>
    <p><strong><a name="[4c]" id="[4c]"></a>__scatterload_copy</strong> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)<br />
    <br />
    [Calls]</p>
    <ul>
      <li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy</li>
    </ul>
    <p><strong><a name="[a0]" id="[a0]"></a>__scatterload_null</strong> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)</p>
    <p><strong><a name="[a1]" id="[a1]"></a>__scatterload_zeroinit</strong> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)</p>
    <p><strong><a name="[4d]" id="[4d]"></a>_printf_d</strong> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 72 + Unknown Stack Size</li>
      <li>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec</li>
    </ul>
    <p><strong><a name="[5f]" id="[5f]"></a>_printf_percent</strong> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf</li>
    </ul>
    <p><strong><a name="[a2]" id="[a2]"></a>_printf_percent_end</strong> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))</p>
    <p><strong><a name="[52]" id="[52]"></a>__rt_lib_init</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li</li>
    </ul>
    <p><strong><a name="[a3]" id="[a3]"></a>__rt_lib_init_alloca_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))</p>
    <p><strong><a name="[a4]" id="[a4]"></a>__rt_lib_init_argv_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))</p>
    <p><strong><a name="[a5]" id="[a5]"></a>__rt_lib_init_atexit_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))</p>
    <p><strong><a name="[a6]" id="[a6]"></a>__rt_lib_init_clock_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))</p>
    <p><strong><a name="[a7]" id="[a7]"></a>__rt_lib_init_cpp_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))</p>
    <p><strong><a name="[a8]" id="[a8]"></a>__rt_lib_init_exceptions_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))</p>
    <p><strong><a name="[a9]" id="[a9]"></a>__rt_lib_init_fp_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))</p>
    <p><strong><a name="[aa]" id="[aa]"></a>__rt_lib_init_fp_trap_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))</p>
    <p><strong><a name="[ab]" id="[ab]"></a>__rt_lib_init_getenv_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))</p>
    <p><strong><a name="[ac]" id="[ac]"></a>__rt_lib_init_heap_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))</p>
    <p><strong><a name="[ad]" id="[ad]"></a>__rt_lib_init_lc_collate_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))</p>
    <p><strong><a name="[ae]" id="[ae]"></a>__rt_lib_init_lc_ctype_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))</p>
    <p><strong><a name="[af]" id="[af]"></a>__rt_lib_init_lc_monetary_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))</p>
    <p><strong><a name="[b0]" id="[b0]"></a>__rt_lib_init_lc_numeric_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))</p>
    <p><strong><a name="[b1]" id="[b1]"></a>__rt_lib_init_lc_time_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))</p>
    <p><strong><a name="[b2]" id="[b2]"></a>__rt_lib_init_preinit_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))</p>
    <p><strong><a name="[b3]" id="[b3]"></a>__rt_lib_init_rand_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))</p>
    <p><strong><a name="[b4]" id="[b4]"></a>__rt_lib_init_relocate_pie_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))</p>
    <p><strong><a name="[b5]" id="[b5]"></a>__rt_lib_init_return</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))</p>
    <p><strong><a name="[b6]" id="[b6]"></a>__rt_lib_init_signal_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))</p>
    <p><strong><a name="[b7]" id="[b7]"></a>__rt_lib_init_stdio_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))</p>
    <p><strong><a name="[b8]" id="[b8]"></a>__rt_lib_init_user_alloc_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))</p>
    <p><strong><a name="[57]" id="[57]"></a>__rt_lib_shutdown</strong> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls</li>
    </ul>
    <p><strong><a name="[b9]" id="[b9]"></a>__rt_lib_shutdown_cpp_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))</p>
    <p><strong><a name="[ba]" id="[ba]"></a>__rt_lib_shutdown_fp_trap_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))</p>
    <p><strong><a name="[bb]" id="[bb]"></a>__rt_lib_shutdown_heap_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))</p>
    <p><strong><a name="[bc]" id="[bc]"></a>__rt_lib_shutdown_return</strong> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))</p>
    <p><strong><a name="[bd]" id="[bd]"></a>__rt_lib_shutdown_signal_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))</p>
    <p><strong><a name="[be]" id="[be]"></a>__rt_lib_shutdown_stdio_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))</p>
    <p><strong><a name="[bf]" id="[bf]"></a>__rt_lib_shutdown_user_alloc_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))</p>
    <p><strong><a name="[4a]" id="[4a]"></a>__rt_entry</strong> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2</li>
      <li><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main</li>
    </ul>
    <p><strong><a name="[c0]" id="[c0]"></a>__rt_entry_presh_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))</p>
    <p><strong><a name="[4f]" id="[4f]"></a>__rt_entry_sh</strong> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 8 + Unknown Stack Size</li>
      <li>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap</li>
    </ul>
    <p><strong><a name="[51]" id="[51]"></a>__rt_entry_li</strong> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))<br />
    <br />
    [Calls]</p>
    <ul>
      <li><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init</li>
    </ul>
    <p><strong><a name="[c1]" id="[c1]"></a>__rt_entry_postsh_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))</p>
    <p><strong><a name="[53]" id="[53]"></a>__rt_entry_main</strong> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 288 + Unknown Stack Size</li>
      <li>Call Chain = __rt_entry_main &rArr; main &rArr; OLED_Proc &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Write &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main</li>
      <li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit</li>
    </ul>
    <p><strong><a name="[c2]" id="[c2]"></a>__rt_entry_postli_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))</p>
    <p><strong><a name="[64]" id="[64]"></a>__rt_exit</strong> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit</li>
    </ul>
    <p><strong><a name="[56]" id="[56]"></a>__rt_exit_ls</strong> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))<br />
    <br />
    [Calls]</p>
    <ul>
      <li><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown</li>
    </ul>
    <p><strong><a name="[c3]" id="[c3]"></a>__rt_exit_prels_1</strong> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))</p>
    <p><strong><a name="[58]" id="[58]"></a>__rt_exit_exit</strong> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))<br />
    <br />
    [Calls]</p>
    <ul>
      <li><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit</li>
    </ul>
    <p><strong><a name="[0]" id="[0]"></a>Reset_Handler</strong> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[1c]" id="[1c]"></a>ADC_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    <br />
    [Calls]</p>
    <ul>
      <li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler</li>
    </ul><br />
    [Address Reference Count : 1]
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[3a]" id="[3a]"></a>AES_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[1e]" id="[1e]"></a>COMP_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[1d]" id="[1d]"></a>DAC_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[15]" id="[15]"></a>DMA1_Channel1_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[16]" id="[16]"></a>DMA1_Channel2_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[17]" id="[17]"></a>DMA1_Channel3_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[18]" id="[18]"></a>DMA1_Channel4_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[19]" id="[19]"></a>DMA1_Channel5_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[1a]" id="[1a]"></a>DMA1_Channel6_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[1b]" id="[1b]"></a>DMA1_Channel7_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[3d]" id="[3d]"></a>DMA2_Channel1_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[3e]" id="[3e]"></a>DMA2_Channel2_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[3f]" id="[3f]"></a>DMA2_Channel3_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[40]" id="[40]"></a>DMA2_Channel4_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[41]" id="[41]"></a>DMA2_Channel5_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[42]" id="[42]"></a>DMA2_Channel6_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[43]" id="[43]"></a>DMA2_Channel7_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[44]" id="[44]"></a>DMAMUX1_OVR_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[10]" id="[10]"></a>EXTI0_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[32]" id="[32]"></a>EXTI15_10_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[11]" id="[11]"></a>EXTI1_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[12]" id="[12]"></a>EXTI2_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[13]" id="[13]"></a>EXTI3_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[14]" id="[14]"></a>EXTI4_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[1f]" id="[1f]"></a>EXTI9_5_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[e]" id="[e]"></a>FLASH_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[36]" id="[36]"></a>HSEM_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[28]" id="[28]"></a>I2C1_ER_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[27]" id="[27]"></a>I2C1_EV_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[2a]" id="[2a]"></a>I2C2_ER_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[29]" id="[29]"></a>I2C2_EV_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[38]" id="[38]"></a>I2C3_ER_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[37]" id="[37]"></a>I2C3_EV_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[30]" id="[30]"></a>LPTIM1_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[31]" id="[31]"></a>LPTIM2_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[34]" id="[34]"></a>LPTIM3_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[2f]" id="[2f]"></a>LPUART1_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[3c]" id="[3c]"></a>PKA_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[b]" id="[b]"></a>PVD_PVM_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[f]" id="[f]"></a>RCC_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[3b]" id="[3b]"></a>RNG_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[33]" id="[33]"></a>RTC_Alarm_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[d]" id="[d]"></a>RTC_WKUP_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[2b]" id="[2b]"></a>SPI1_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[2c]" id="[2c]"></a>SPI2_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[35]" id="[35]"></a>SUBGHZSPI_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[39]" id="[39]"></a>SUBGHZ_Radio_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[c]" id="[c]"></a>TAMP_STAMP_LSECSS_SSRU_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[25]" id="[25]"></a>TIM16_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[26]" id="[26]"></a>TIM17_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[20]" id="[20]"></a>TIM1_BRK_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[23]" id="[23]"></a>TIM1_CC_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[22]" id="[22]"></a>TIM1_TRG_COM_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[21]" id="[21]"></a>TIM1_UP_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[24]" id="[24]"></a>TIM2_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[2d]" id="[2d]"></a>USART1_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[2e]" id="[2e]"></a>USART2_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[a]" id="[a]"></a>WWDG_IRQHandler</strong> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[63]" id="[63]"></a>__user_initial_stackheap</strong> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32wle5xx.o(.text))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap</li>
    </ul>
    <p><strong><a name="[9d]" id="[9d]"></a>__aeabi_uldivmod</strong> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 48</li>
      <li>Call Chain = __aeabi_uldivmod</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig</li>
    </ul>
    <p><strong><a name="[c4]" id="[c4]"></a>_ll_udiv</strong> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)</p>
    <p><strong><a name="[5a]" id="[5a]"></a>__2sprintf</strong> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 136 + Unknown Stack Size</li>
      <li>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc</li>
      <li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Proc</li>
    </ul>
    <p><strong><a name="[60]" id="[60]"></a>_printf_pre_padding</strong> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 16</li>
      <li>Call Chain = _printf_pre_padding</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common</li>
    </ul>
    <p><strong><a name="[61]" id="[61]"></a>_printf_post_padding</strong> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 16</li>
      <li>Call Chain = _printf_post_padding</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common</li>
    </ul>
    <p><strong><a name="[4e]" id="[4e]"></a>_printf_int_dec</strong> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 72</li>
      <li>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d</li>
    </ul>
    <p><strong><a name="[5d]" id="[5d]"></a>__printf</strong> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 40 + Unknown Stack Size</li>
      <li>Call Chain = __printf</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent</li>
      <li><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common</li>
    </ul>
    <p><strong><a name="[73]" id="[73]"></a>__aeabi_memclr4</strong> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit</li>
      <li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit</li>
      <li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main</li>
    </ul>
    <p><strong><a name="[c5]" id="[c5]"></a>__aeabi_memclr8</strong> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)</p>
    <p><strong><a name="[c6]" id="[c6]"></a>__rt_memclr_w</strong> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)</p>
    <p><strong><a name="[c7]" id="[c7]"></a>_memset_w</strong> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)</p>
    <p><strong><a name="[c8]" id="[c8]"></a>__use_two_region_memory</strong> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)</p>
    <p><strong><a name="[c9]" id="[c9]"></a>__rt_heap_escrow$2region</strong> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)</p>
    <p><strong><a name="[ca]" id="[ca]"></a>__rt_heap_expand$2region</strong> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)</p>
    <p><strong><a name="[5c]" id="[5c]"></a>_printf_int_common</strong> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 48</li>
      <li>Call Chain = _printf_int_common &rArr; _printf_post_padding</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding</li>
      <li><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec</li>
    </ul>
    <p><strong><a name="[5b]" id="[5b]"></a>_printf_char_common</strong> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 104 + Unknown Stack Size</li>
      <li>Call Chain = _printf_char_common &rArr; __printf</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf</li>
    </ul>
    <p><strong><a name="[47]" id="[47]"></a>_sputc</strong> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf</li>
    </ul><br />
    [Address Reference Count : 1]
    <ul>
      <li>noretval__2sprintf.o(.text)</li>
    </ul>
    <p><strong><a name="[50]" id="[50]"></a>__user_setup_stackheap</strong> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 8 + Unknown Stack Size</li>
      <li>Call Chain = __user_setup_stackheap</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap</li>
      <li><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh</li>
    </ul>
    <p><strong><a name="[55]" id="[55]"></a>exit</strong> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 8 + Unknown Stack Size</li>
      <li>Call Chain = exit</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main</li>
    </ul>
    <p><strong><a name="[cb]" id="[cb]"></a>__user_libspace</strong> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)</p>
    <p><strong><a name="[62]" id="[62]"></a>__user_perproc_libspace</strong> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap</li>
    </ul>
    <p><strong><a name="[cc]" id="[cc]"></a>__user_perthread_libspace</strong> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)</p>
    <p><strong><a name="[59]" id="[59]"></a>_sys_exit</strong> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit</li>
    </ul>
    <p><strong><a name="[cd]" id="[cd]"></a>__I$use$semihosting</strong> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)</p>
    <p><strong><a name="[ce]" id="[ce]"></a>__use_no_semihosting_swi</strong> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)</p>
    <p><strong><a name="[cf]" id="[cf]"></a>__semihosting_library_function</strong> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)</p>
    <p><strong><a name="[65]" id="[65]"></a>ADC_Enable</strong> (Thumb, 250 bytes, Stack size 24 bytes, stm32wlxx_hal_adc.o(.text.ADC_Enable))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 24</li>
      <li>Call Chain = ADC_Enable</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start</li>
    </ul>
    <p><strong><a name="[67]" id="[67]"></a>BSP_Init</strong> (Thumb, 4 bytes, Stack size 0 bytes, task.o(.text.BSP_Init))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 104</li>
      <li>Call Chain = BSP_Init &rArr; OLED_Init &rArr; OLED_Clear &rArr; OLED_Write &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main</li>
    </ul>
    <p><strong><a name="[4]" id="[4]"></a>BusFault_Handler</strong> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.BusFault_Handler))<br />
    <br />
    [Calls]</p>
    <ul>
      <li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler</li>
    </ul><br />
    [Address Reference Count : 1]
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[7]" id="[7]"></a>DebugMon_Handler</strong> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.DebugMon_Handler))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[75]" id="[75]"></a>Error_Handler</strong> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit</li>
      <li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit</li>
      <li><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init</li>
      <li><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init</li>
      <li><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init</li>
    </ul>
    <p><strong><a name="[8c]" id="[8c]"></a>HAL_ADC_ConfigChannel</strong> (Thumb, 582 bytes, Stack size 28 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_ConfigChannel))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 28</li>
      <li>Call Chain = HAL_ADC_ConfigChannel</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init</li>
    </ul>
    <p><strong><a name="[99]" id="[99]"></a>HAL_ADC_GetValue</strong> (Thumb, 6 bytes, Stack size 0 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_GetValue))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Proc</li>
    </ul>
    <p><strong><a name="[69]" id="[69]"></a>HAL_ADC_Init</strong> (Thumb, 602 bytes, Stack size 24 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_Init))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 96</li>
      <li>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init</li>
    </ul>
    <p><strong><a name="[6a]" id="[6a]"></a>HAL_ADC_MspInit</strong> (Thumb, 98 bytes, Stack size 32 bytes, adc.o(.text.HAL_ADC_MspInit))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 72</li>
      <li>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init</li>
    </ul>
    <p><strong><a name="[6c]" id="[6c]"></a>HAL_ADC_PollForConversion</strong> (Thumb, 252 bytes, Stack size 24 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_PollForConversion))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 24</li>
      <li>Call Chain = HAL_ADC_PollForConversion</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Proc</li>
    </ul>
    <p><strong><a name="[6d]" id="[6d]"></a>HAL_ADC_Start</strong> (Thumb, 94 bytes, Stack size 8 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_Start))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 32</li>
      <li>Call Chain = HAL_ADC_Start &rArr; ADC_Enable</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Proc</li>
    </ul>
    <p><strong><a name="[6b]" id="[6b]"></a>HAL_GPIO_Init</strong> (Thumb, 418 bytes, Stack size 40 bytes, stm32wlxx_hal_gpio.o(.text.HAL_GPIO_Init))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 40</li>
      <li>Call Chain = HAL_GPIO_Init</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit</li>
      <li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit</li>
      <li><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit</li>
      <li><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init</li>
    </ul>
    <p><strong><a name="[8a]" id="[8a]"></a>HAL_GPIO_ReadPin</strong> (Thumb, 10 bytes, Stack size 0 bytes, stm32wlxx_hal_gpio.o(.text.HAL_GPIO_ReadPin))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Proc</li>
    </ul>
    <p><strong><a name="[8e]" id="[8e]"></a>HAL_GPIO_WritePin</strong> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_gpio.o(.text.HAL_GPIO_WritePin))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init</li>
    </ul>
    <p><strong><a name="[66]" id="[66]"></a>HAL_GetTick</strong> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_GetTick))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred</li>
      <li><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout</li>
      <li><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion</li>
      <li><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable</li>
      <li><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init</li>
      <li><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit</li>
      <li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig</li>
      <li><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig</li>
      <li><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig</li>
      <li><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout</li>
    </ul>
    <p><strong><a name="[90]" id="[90]"></a>HAL_I2CEx_ConfigAnalogFilter</strong> (Thumb, 74 bytes, Stack size 0 bytes, stm32wlxx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init</li>
    </ul>
    <p><strong><a name="[91]" id="[91]"></a>HAL_I2CEx_ConfigDigitalFilter</strong> (Thumb, 72 bytes, Stack size 0 bytes, stm32wlxx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init</li>
    </ul>
    <p><strong><a name="[6e]" id="[6e]"></a>HAL_I2C_Init</strong> (Thumb, 162 bytes, Stack size 8 bytes, stm32wlxx_hal_i2c.o(.text.HAL_I2C_Init))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 136 + Unknown Stack Size</li>
      <li>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init</li>
    </ul>
    <p><strong><a name="[70]" id="[70]"></a>HAL_I2C_Master_Transmit</strong> (Thumb, 504 bytes, Stack size 40 bytes, stm32wlxx_hal_i2c.o(.text.HAL_I2C_Master_Transmit))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 72</li>
      <li>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred</li>
      <li><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout</li>
      <li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write</li>
    </ul>
    <p><strong><a name="[6f]" id="[6f]"></a>HAL_I2C_MspInit</strong> (Thumb, 138 bytes, Stack size 88 bytes, i2c.o(.text.HAL_I2C_MspInit))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 128 + Unknown Stack Size</li>
      <li>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig</li>
      <li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init</li>
      <li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler</li>
      <li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init</li>
    </ul>
    <p><strong><a name="[9c]" id="[9c]"></a>HAL_IncTick</strong> (Thumb, 26 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_IncTick))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler</li>
    </ul>
    <p><strong><a name="[76]" id="[76]"></a>HAL_Init</strong> (Thumb, 44 bytes, Stack size 8 bytes, stm32wlxx_hal.o(.text.HAL_Init))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 32</li>
      <li>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping</li>
      <li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq</li>
      <li><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick</li>
      <li><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main</li>
    </ul>
    <p><strong><a name="[79]" id="[79]"></a>HAL_InitTick</strong> (Thumb, 72 bytes, Stack size 16 bytes, stm32wlxx_hal.o(.text.HAL_InitTick))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 24</li>
      <li>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config</li>
      <li><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority</li>
      <li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig</li>
      <li><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig</li>
      <li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init</li>
    </ul>
    <p><strong><a name="[7a]" id="[7a]"></a>HAL_MspInit</strong> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_msp.o(.text.HAL_MspInit))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init</li>
    </ul>
    <p><strong><a name="[7c]" id="[7c]"></a>HAL_NVIC_SetPriority</strong> (Thumb, 86 bytes, Stack size 8 bytes, stm32wlxx_hal_cortex.o(.text.HAL_NVIC_SetPriority))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 8</li>
      <li>Call Chain = HAL_NVIC_SetPriority</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick</li>
    </ul>
    <p><strong><a name="[77]" id="[77]"></a>HAL_NVIC_SetPriorityGrouping</strong> (Thumb, 32 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init</li>
    </ul>
    <p><strong><a name="[83]" id="[83]"></a>HAL_PWREx_GetVoltageRange</strong> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig</li>
    </ul>
    <p><strong><a name="[7d]" id="[7d]"></a>HAL_PWR_EnableBkUpAccess</strong> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig</li>
      <li><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig</li>
    </ul>
    <p><strong><a name="[74]" id="[74]"></a>HAL_RCCEx_PeriphCLKConfig</strong> (Thumb, 532 bytes, Stack size 24 bytes, stm32wlxx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 24</li>
      <li>Call Chain = HAL_RCCEx_PeriphCLKConfig</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess</li>
      <li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit</li>
      <li><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit</li>
    </ul>
    <p><strong><a name="[7e]" id="[7e]"></a>HAL_RCC_ClockConfig</strong> (Thumb, 516 bytes, Stack size 32 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_ClockConfig))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 56</li>
      <li>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq</li>
      <li><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick</li>
      <li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main</li>
    </ul>
    <p><strong><a name="[78]" id="[78]"></a>HAL_RCC_GetHCLKFreq</strong> (Thumb, 36 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 8</li>
      <li>Call Chain = HAL_RCC_GetHCLKFreq</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick</li>
      <li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init</li>
    </ul>
    <p><strong><a name="[80]" id="[80]"></a>HAL_RCC_GetPCLK1Freq</strong> (Thumb, 56 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 8</li>
      <li>Call Chain = HAL_RCC_GetPCLK1Freq</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig</li>
    </ul>
    <p><strong><a name="[81]" id="[81]"></a>HAL_RCC_GetPCLK2Freq</strong> (Thumb, 56 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 8</li>
      <li>Call Chain = HAL_RCC_GetPCLK2Freq</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig</li>
    </ul>
    <p><strong><a name="[7f]" id="[7f]"></a>HAL_RCC_GetSysClockFreq</strong> (Thumb, 242 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq</li>
      <li><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq</li>
      <li><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq</li>
      <li><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig</li>
      <li><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig</li>
      <li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig</li>
    </ul>
    <p><strong><a name="[82]" id="[82]"></a>HAL_RCC_OscConfig</strong> (Thumb, 1926 bytes, Stack size 40 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_OscConfig))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 64</li>
      <li>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq</li>
      <li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange</li>
      <li><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess</li>
      <li><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick</li>
      <li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main</li>
    </ul>
    <p><strong><a name="[7b]" id="[7b]"></a>HAL_SYSTICK_Config</strong> (Thumb, 44 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.HAL_SYSTICK_Config))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick</li>
    </ul>
    <p><strong><a name="[95]" id="[95]"></a>HAL_UARTEx_DisableFifoMode</strong> (Thumb, 54 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init</li>
    </ul>
    <p><strong><a name="[94]" id="[94]"></a>HAL_UARTEx_SetRxFifoThreshold</strong> (Thumb, 144 bytes, Stack size 16 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 16</li>
      <li>Call Chain = HAL_UARTEx_SetRxFifoThreshold</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init</li>
    </ul>
    <p><strong><a name="[93]" id="[93]"></a>HAL_UARTEx_SetTxFifoThreshold</strong> (Thumb, 144 bytes, Stack size 16 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 16</li>
      <li>Call Chain = HAL_UARTEx_SetTxFifoThreshold</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init</li>
    </ul>
    <p><strong><a name="[84]" id="[84]"></a>HAL_UART_Init</strong> (Thumb, 216 bytes, Stack size 24 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_Init))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 152 + Unknown Stack Size</li>
      <li>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick</li>
      <li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit</li>
      <li><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout</li>
      <li><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig</li>
      <li><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init</li>
    </ul>
    <p><strong><a name="[85]" id="[85]"></a>HAL_UART_MspInit</strong> (Thumb, 132 bytes, Stack size 88 bytes, usart.o(.text.HAL_UART_MspInit))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 128 + Unknown Stack Size</li>
      <li>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig</li>
      <li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init</li>
      <li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler</li>
      <li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init</li>
    </ul>
    <p><strong><a name="[2]" id="[2]"></a>HardFault_Handler</strong> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.HardFault_Handler))<br />
    <br />
    [Calls]</p>
    <ul>
      <li><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler</li>
    </ul><br />
    [Address Reference Count : 1]
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[89]" id="[89]"></a>KEY_Proc</strong> (Thumb, 124 bytes, Stack size 8 bytes, task.o(.text.KEY_Proc))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 8</li>
      <li>Call Chain = KEY_Proc</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main</li>
    </ul>
    <p><strong><a name="[8b]" id="[8b]"></a>MX_ADC_Init</strong> (Thumb, 126 bytes, Stack size 24 bytes, adc.o(.text.MX_ADC_Init))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 120</li>
      <li>Call Chain = MX_ADC_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel</li>
      <li><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init</li>
      <li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main</li>
    </ul>
    <p><strong><a name="[8d]" id="[8d]"></a>MX_GPIO_Init</strong> (Thumb, 132 bytes, Stack size 48 bytes, gpio.o(.text.MX_GPIO_Init))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 88</li>
      <li>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init</li>
      <li><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main</li>
    </ul>
    <p><strong><a name="[8f]" id="[8f]"></a>MX_I2C1_Init</strong> (Thumb, 108 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C1_Init))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 144 + Unknown Stack Size</li>
      <li>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter</li>
      <li><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter</li>
      <li><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init</li>
      <li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main</li>
    </ul>
    <p><strong><a name="[92]" id="[92]"></a>MX_USART2_UART_Init</strong> (Thumb, 130 bytes, Stack size 8 bytes, usart.o(.text.MX_USART2_UART_Init))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 160 + Unknown Stack Size</li>
      <li>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode</li>
      <li><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold</li>
      <li><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold</li>
      <li><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init</li>
      <li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main</li>
    </ul>
    <p><strong><a name="[3]" id="[3]"></a>MemManage_Handler</strong> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.MemManage_Handler))<br />
    <br />
    [Calls]</p>
    <ul>
      <li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler</li>
    </ul><br />
    [Address Reference Count : 1]
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[1]" id="[1]"></a>NMI_Handler</strong> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.NMI_Handler))<br />
    <br />
    [Calls]</p>
    <ul>
      <li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler</li>
    </ul><br />
    [Address Reference Count : 1]
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[96]" id="[96]"></a>OLED_Clear</strong> (Thumb, 180 bytes, Stack size 8 bytes, oled.o(.text.OLED_Clear))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 96</li>
      <li>Call Chain = OLED_Clear &rArr; OLED_Write &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Proc</li>
      <li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init</li>
    </ul>
    <p><strong><a name="[68]" id="[68]"></a>OLED_Init</strong> (Thumb, 82 bytes, Stack size 8 bytes, oled.o(.text.OLED_Init))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 104</li>
      <li>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_Write &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write</li>
      <li><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init</li>
    </ul>
    <p><strong><a name="[98]" id="[98]"></a>OLED_Proc</strong> (Thumb, 232 bytes, Stack size 48 bytes, task.o(.text.OLED_Proc))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 192 + Unknown Stack Size</li>
      <li>Call Chain = OLED_Proc &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Write &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue</li>
      <li><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion</li>
      <li><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start</li>
      <li><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf</li>
      <li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString</li>
      <li><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main</li>
    </ul>
    <p><strong><a name="[9b]" id="[9b]"></a>OLED_ShowChar</strong> (Thumb, 334 bytes, Stack size 32 bytes, oled.o(.text.OLED_ShowChar))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 120</li>
      <li>Call Chain = OLED_ShowChar &rArr; OLED_Write &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString</li>
    </ul>
    <p><strong><a name="[9a]" id="[9a]"></a>OLED_ShowString</strong> (Thumb, 64 bytes, Stack size 24 bytes, oled.o(.text.OLED_ShowString))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 144</li>
      <li>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Write &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Proc</li>
    </ul>
    <p><strong><a name="[97]" id="[97]"></a>OLED_Write</strong> (Thumb, 44 bytes, Stack size 16 bytes, i2c.o(.text.OLED_Write))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 88</li>
      <li>Call Chain = OLED_Write &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar</li>
      <li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init</li>
      <li><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear</li>
    </ul>
    <p><strong><a name="[8]" id="[8]"></a>PendSV_Handler</strong> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.PendSV_Handler))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[6]" id="[6]"></a>SVC_Handler</strong> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.SVC_Handler))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[9]" id="[9]"></a>SysTick_Handler</strong> (Thumb, 50 bytes, Stack size 8 bytes, stm32wlxx_it.o(.text.SysTick_Handler))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 8</li>
      <li>Call Chain = SysTick_Handler</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick</li>
    </ul><br />
    [Address Reference Count : 1]
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[45]" id="[45]"></a>SystemInit</strong> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32wlxx.o(.text.SystemInit))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>startup_stm32wle5xx.o(.text)</li>
    </ul>
    <p><strong><a name="[87]" id="[87]"></a>UART_AdvFeatureConfig</strong> (Thumb, 234 bytes, Stack size 8 bytes, stm32wlxx_hal_uart.o(.text.UART_AdvFeatureConfig))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 8</li>
      <li>Call Chain = UART_AdvFeatureConfig</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init</li>
    </ul>
    <p><strong><a name="[86]" id="[86]"></a>UART_SetConfig</strong> (Thumb, 604 bytes, Stack size 16 bytes, stm32wlxx_hal_uart.o(.text.UART_SetConfig))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 64</li>
      <li>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq</li>
      <li><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq</li>
      <li><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq</li>
      <li><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init</li>
    </ul>
    <p><strong><a name="[88]" id="[88]"></a>UART_WaitOnFlagUntilTimeout</strong> (Thumb, 526 bytes, Stack size 24 bytes, stm32wlxx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 24</li>
      <li>Call Chain = UART_WaitOnFlagUntilTimeout</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init</li>
    </ul>
    <p><strong><a name="[5]" id="[5]"></a>UsageFault_Handler</strong> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.UsageFault_Handler))<br />
    <br />
    [Calls]</p>
    <ul>
      <li><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler</li>
    </ul><br />
    [Address Reference Count : 1]
    <ul>
      <li>startup_stm32wle5xx.o(RESET)</li>
    </ul>
    <p><strong><a name="[54]" id="[54]"></a>main</strong> (Thumb, 146 bytes, Stack size 96 bytes, main.o(.text.main))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 288 + Unknown Stack Size</li>
      <li>Call Chain = main &rArr; OLED_Proc &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Write &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Proc</li>
      <li><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Proc</li>
      <li><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init</li>
      <li><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init</li>
      <li><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init</li>
      <li><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init</li>
      <li><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init</li>
      <li><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig</li>
      <li><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig</li>
      <li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init</li>
      <li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main</li>
    </ul>
    <p><strong><a name="[5e]" id="[5e]"></a>_is_digit</strong> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))<br />
    <br />
    [Called By]</p>
    <ul>
      <li><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf</li>
    </ul>
    <p></p>
    <h3>Local Symbols</h3>
    <p><strong><a name="[71]" id="[71]"></a>I2C_WaitOnTXISFlagUntilTimeout</strong> (Thumb, 136 bytes, Stack size 16 bytes, stm32wlxx_hal_i2c.o(.text.I2C_WaitOnTXISFlagUntilTimeout))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 32</li>
      <li>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred</li>
      <li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit</li>
    </ul>
    <p><strong><a name="[72]" id="[72]"></a>I2C_IsErrorOccurred</strong> (Thumb, 348 bytes, Stack size 16 bytes, stm32wlxx_hal_i2c.o(.text.I2C_IsErrorOccurred))<br />
    <br />
    [Stack]</p>
    <ul>
      <li>Max Depth = 16</li>
      <li>Call Chain = I2C_IsErrorOccurred</li>
    </ul><br />
    [Calls]
    <ul>
      <li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick</li>
    </ul><br />
    [Called By]
    <ul>
      <li><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout</li>
      <li><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit</li>
    </ul>
    <p><strong><a name="[48]" id="[48]"></a>_printf_input_char</strong> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))<br />
    [Address Reference Count : 1]</p>
    <ul>
      <li>_printf_char_common.o(.text)</li>
    </ul>
    <p></p>
    <h3>Undefined Global Symbols</h3>
    <hr />
  </li>
</body>
</html>
